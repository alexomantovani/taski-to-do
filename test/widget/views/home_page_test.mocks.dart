// Mocks generated by Mockito 5.4.5 from annotations
// in taski_to_do/test/widget/views/home_page_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;
import 'dart:ui' as _i7;

import 'package:flutter/material.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:taski_to_do/core/enums/task_type.dart' as _i4;
import 'package:taski_to_do/models/task_model.dart' as _i5;
import 'package:taski_to_do/viewmodels/task_view_model.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeValueNotifier_0<T> extends _i1.SmartFake
    implements _i2.ValueNotifier<T> {
  _FakeValueNotifier_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [TaskViewModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockTaskViewModel extends _i1.Mock implements _i3.TaskViewModel {
  MockTaskViewModel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ValueNotifier<Map<String, bool>> get expandedTasks => (super.noSuchMethod(
        Invocation.getter(#expandedTasks),
        returnValue: _FakeValueNotifier_0<Map<String, bool>>(
          this,
          Invocation.getter(#expandedTasks),
        ),
      ) as _i2.ValueNotifier<Map<String, bool>>);

  @override
  _i4.TaskState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _i4.TaskState.initial,
      ) as _i4.TaskState);

  @override
  _i2.ValueNotifier<List<_i5.TaskModel>> get tasksNotifier =>
      (super.noSuchMethod(
        Invocation.getter(#tasksNotifier),
        returnValue: _FakeValueNotifier_0<List<_i5.TaskModel>>(
          this,
          Invocation.getter(#tasksNotifier),
        ),
      ) as _i2.ValueNotifier<List<_i5.TaskModel>>);

  @override
  List<_i5.TaskModel> get tasks => (super.noSuchMethod(
        Invocation.getter(#tasks),
        returnValue: <_i5.TaskModel>[],
      ) as List<_i5.TaskModel>);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  void restartState() => super.noSuchMethod(
        Invocation.method(
          #restartState,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.Future<void> loadTasks() => (super.noSuchMethod(
        Invocation.method(
          #loadTasks,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> addTask(_i5.TaskModel? task) => (super.noSuchMethod(
        Invocation.method(
          #addTask,
          [task],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> updateTask(_i5.TaskModel? task) => (super.noSuchMethod(
        Invocation.method(
          #updateTask,
          [task],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> deleteTask(String? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteTask,
          [id],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> deleteAllTasks() => (super.noSuchMethod(
        Invocation.method(
          #deleteAllTasks,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<_i5.TaskModel?> getTaskById(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getTaskById,
          [id],
        ),
        returnValue: _i6.Future<_i5.TaskModel?>.value(),
      ) as _i6.Future<_i5.TaskModel?>);

  @override
  _i6.Future<void> getTasksByStatus(_i5.Status? status) => (super.noSuchMethod(
        Invocation.method(
          #getTasksByStatus,
          [status],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> getTasksByTitle(String? title) => (super.noSuchMethod(
        Invocation.method(
          #getTasksByTitle,
          [title],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  void toggleTaskExpansion(String? taskId) => super.noSuchMethod(
        Invocation.method(
          #toggleTaskExpansion,
          [taskId],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(_i7.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i7.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
